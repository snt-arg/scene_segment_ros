import torch
from detectron2.config import get_cfg
from fastsam import FastSAM, FastSAMPrompt
from utils.helpers import getRootAbsolutePath
from detectron2.engine import DefaultPredictor
from panopticfcn import add_panopticfcn_config

DEVICE = torch.device('cuda:0' if torch.cuda.is_available() else 'cpu')


def fastSamInit(name: str, path: str):
    """
    Initializes Fast SAM (Semantic Anything Model) and returns the registered model

    Parameters
    -------
    name: str
        The name of the model (in this case, FAST-SAM)
    path: str
        The path to the model

    Returns
    -------
    model: str
        The initialized model
    """
    print(f'Initializing "{name}" model ...')
    # Initialization
    model = FastSAM(path)
    print('Model loaded and is ready to use!\n')
    return model


def fastSamSegmenter(image, model, imageSize=640, conf=0.4, iou=0.9):
    """
    Segments the given image using Fast SAM

    Parameters
    -------
    image: Mat
        The input image for segmentation
    model: dict
        A registered model of Fast SAM
    imageSize: int
        The width of the input image (default: 640)
    conf: float
        The object confidence threshold (default: 0.4)
    iou: float
        Annotations filtering threshold (default: 0.4)

    Returns
    -------
    masks: dict
        The masks created by the model containing segments
    """
    print()
    # Generating mask (everything result)
    maskGenerator = model(
        image,
        device=DEVICE,
        retina_masks=True,
        imgsz=imageSize,
        conf=conf,
        iou=iou
    )
    # Process
    masks = FastSAMPrompt(image, maskGenerator, device=DEVICE)
    return masks


def FCNInit(name: str, modelPath: str, configPath: str):
    """
    Initializes Detectron2 model based on Panoptic FCNconfig

    Parameters
    -------
    name: str
        The name of the model (in this case, FAST-SAM)
    modelPath: str
        The path to the model
    configPath: str
        The path to the model's specific configurations

    Returns
    -------
    model: str
        The initialized model
    """
    print(f'Initializing "{name}" model ...')
    # Convert to absolute path
    configPath = getRootAbsolutePath(configPath)
    modelPath = getRootAbsolutePath(modelPath)
    # Initialization
    cfg = get_cfg()
    add_panopticfcn_config(cfg)
    cfg.merge_from_file(configPath)
    cfg.MODEL.ROI_HEADS.SCORE_THRESH_TEST = 0.5
    cfg.MODEL.WEIGHTS = modelPath
    cfg.DEVICE = DEVICE.type
    model = DefaultPredictor(cfg)
    return model, cfg


def FCNSegmenter(image, model):
    """
    Segments the given image using Panoptic FCN

    Parameters
    -------
    image: Mat
        The input image for segmentation
    model: DefaultPredictor
        A predictor model based on Detectron 2

    Returns
    -------
    predictions: dict
        The results generated by the model containing segments
    """
    predictions = model(image)
    return predictions
